---
import Layout from '../layouts/Layout.astro';
import Guestbook from '../components/Guestbook.astro';
// import Contributions from '../components/Contributions.astro';
import Projects from '../components/Projects.astro';
import Card from '../components/Card.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import contributionsdata from '../_data/contributions.json';

import config from '../_data/config';

import * as introduction from '../_data/introduction.md';
import * as afterword from '../_data/afterword.md';

const typeWriterWords = config.typewrite_words;

const frontend_skills = config.skills.front_end;
const backend_skills = config.skills.back_end;
const tech_skills = config.skills.tech;
const other_skills = config.skills.other;

const projects = config.projects;

const contributions = contributionsdata;
---

<Layout title={config.name + "'s Portfolio"}>
  <Header />
  <br>
  <main>
	<div class="introduction">
		<h1 id="name">Hey! I'm<br><span class="text-gradient">{config.name}</span></h1>
		<br>
		<p id="typewriter"><i class="fa fa-arrow-right"></i> <span class="welcome-text"></span> <i class="fa fa-arrow-left"></i></p>
		<style>
		@media (max-width: 600px) {

			main {
				font-size: 16px;
				margin-top: 2rem;
			}
			#name {
				font-size: 3rem;
			}
			.text-gradient {
				font-size: 4rem;
			}
			#typewriter {
				font-size: 1.5rem;
			}
			#aboutme {
				margin-top: 65%;
			}
		}
		</style>
		<script define:vars={{typeWriterWords}}>
			const words = typeWriterWords;
			let i = 0;
			let currentWord = 0;
			let currentText = "";
			let isDeleting = false;
			let isEnd = false;
			function typeWriter() {
				if (i < words.length) {
					if (isDeleting && currentText.length === 0) {
						isDeleting = false;
						currentWord++;
						if (currentWord === words.length) {
							currentWord = 0;
						}
					}
					if (isDeleting) {
						currentText = words[currentWord].substring(0, currentText.length - 1);
					} else {
						currentText = words[currentWord].substring(0, currentText.length + 1);
					}
					document.querySelector('.welcome-text').innerHTML = currentText;
					let speed = 100;
					if (isDeleting) {
						speed /= 2;
					}
					if (currentText === words[currentWord] && !isDeleting) {
						speed = 2000;
						isDeleting = true;
					}
					if (currentText === "" && isDeleting) {
						isEnd = true;
						isDeleting = false;
						currentWord++;
						if (currentWord === words.length) {
							currentWord = 0;
						}
					}
					setTimeout(typeWriter, speed);
				}
			}
			typeWriter();
		</script>
		<nav class="nav-icons">
			{config.links.github ? <a href={config.links.github} id="github"><i class="fab fa-github"></i></a> : <></>}
			{config.links.discord ? <a href={config.links.discord} id="discord"><i class="fab fa-discord"></i></a> : <></>}
			{config.links.email ? <a href={"mailto:" + config.links.email} id="email"><i class="fa fa-envelope"></i></a> : <></>}
		</nav>
	</div>
	<h4 id="aboutme">About me:</h4>
	<div id="abt-text">
		<Fragment set:html={introduction.compiledContent()}></Fragment>
	</div>
	<hr>
	<br>
    <ul role="list" class="link-card-grid">
      <Card
        title="Frontend Skills:"
        skills={frontend_skills}
      />
      <Card
        title="Backend Skills:"
		skills={backend_skills}
      />
      <Card
        title="Tech Skills:"
		skills={tech_skills}
      />
      <Card
        title="Other Skills:"
		skills={other_skills}
      />
    </ul>
	<h2 id="projects">My Projects:</h2>
    <div class="projects">
        {projects.map((project) => (
            <Projects
				projectname={project.name}
				projectid={project.name}
				projectdescription={project.desc}
				technologies={project.technologies}
				projecttags={project.tags}
				projectpreview={project.preview}
				projectlinks={project.links ? {github: project.links.github ? project.links.github : "", live: project.links.live ? project.links.live : ""} : {github:"",live:""}}
			></Projects>
        ))}
    </div>
	<!-- <div class="contributions">
		<h2>My contributions:</h2>
		<br>
		{contributionsdata ? (<table>
			<tr>
				<th>Project</th>
				<th>Contribution</th>
				<th>Period of time</th>
			</tr>
			{contributionsdata.map((contribution) => (
				<tr>
					<td id="head"><b><a href={contribution.serverinvite}>{contribution.name}</a></b><br> <span class="community_size">{contribution.size}</span> </td>
					<td><b>{contribution.role}</b>: {contribution.role_description}</td>
					<td>{contribution.time}</td>
				</tr>
			))}
		</table>) : (<></>)}
		<br>
	</div>

	{contributionsdata.map((contribution) => (
		<Contributions
			name={contribution.name}
			description={contribution.description}
			serverinvite={contribution.serverinvite}
			size={contribution.size}
			role={contribution.role}
			role_description={contribution.role_description}
			time={contribution.time}
		/>
	))} -->

	<div id="afterword">
		<Fragment set:html={afterword.compiledContent()}></Fragment>
	</div>
	<Guestbook />
  </main>
  <Footer />
</Layout>


<style is:global>
	:root {
		scroll-behavior: smooth;
	}

	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 5rem;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
		font-weight: 400;
	}

	h1#name {
		display: inline-block;
		position: relative;
		text-decoration: none;
    }
    h1#name::after {
		content: '';
		position: absolute;
		width: 100%;
		transform: scaleX(0);
		border-radius: 5px;
		height: 0.05em;
		bottom: 0;
		left: 0;
		background: currentcolor;
		transform-origin: bottom right;
		transition: transform 0.25s ease-out;
    }
    h1#name:hover::after {
		transform: scaleX(1);
		transform-origin: bottom left;
    }
	h1#name:hover {
		cursor: pointer;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
		font-size: 8rem;
		font-weight: 700;
		text-shadow: 0 2px 4px rgba(0, 0, 0, 0.116);
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}


	.introduction {
		text-align: center;
		margin-bottom: 10rem;
	}
	#typewriter {
		font-size: 2.5rem;
		margin-top: 1rem;
	}
	.nav-icons {
		display: flex;
		justify-content: center;
		margin-top: 1rem;
	}
	.nav-icons a {
		font-size: 2rem;
		margin: 0 0.5rem;
		color: white;
	}
	.nav-icons a {
		color: #fff;
		font-size: 2em;
		margin: 0 0.5em;
		text-decoration: none;
		border-radius: 50%;
		height: 2em;
		width: 2em;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	.nav-icons #discord:hover {
		color: #5865F2;
		transform: scale(1.1);
		transition: all ease-in-out 0.2s;
		background-color: #fff;
	}
	.nav-icons #github:hover {
		background-color: #fff;
		color: #000000;
		transform: scale(1.1);
		transition: all ease-in-out 0.2s;
	}
	.nav-icons #email:hover {
		background-color: #fff;
		color: rgb(var(--accent-light));
		transform: scale(1.1);
		transition: all ease-in-out 0.2s;
	}
	.nav-icons #email {
		transition: all ease-out 0.4s;
	}
	.nav-icons #github {
		transition: all ease-out 0.4s;
	}
	.nav-icons #discord {
		transition: all ease-out 0.4s;
	}

	@keyframes ease-out {
		0% {
			transform: scale(1);
			}
		100% {
			transform: scale(1.1);
			}

	}
	#abt-text a {
		color: rgb(var(--accent-light));
		text-decoration: none;
	}

	#afterword a {
		color: rgb(var(--accent-light));
		text-decoration: none;
	}
</style>
